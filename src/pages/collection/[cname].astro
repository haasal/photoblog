---
import { unauthenticatedResponse } from "../../lib/auth";
import { isPrivate } from "../../lib/crud";
import { Claims, appendCollection, decodeToken, genToken } from "../../lib/jwt";

const requestedCollection = Astro.params.cname!;

const suppliedPassword = Astro.url.searchParams.get("password");
const token = Astro.cookies.get("token").value;

let errorResponse;

function setCookie(collection: string, token: Claims | undefined = undefined) {
  if (token) {
    Astro.cookies.set("token", appendCollection(token.collections, collection));
  } else {
    Astro.cookies.set("token", genToken(collection));
  }
}

async function unauthenicated(
  collection: string,
  token: Claims | undefined = undefined
) {
  let result = await isPrivate(collection);

  if (result.err) {
    return new Response("collection does not exist", {
      status: 404,
    });
  }

  if (!result.ok.private) {
    setCookie(collection, token);
    return undefined;
  }

  if (!suppliedPassword || suppliedPassword != result.ok.password) {
    return unauthenticatedResponse("invalid password");
  }

  setCookie(collection, token);
  return undefined;
}

if (token) {
  let claims = decodeToken(token);

  if (claims.ok) {
    const collectionInToken =
      claims.ok.collections.includes(requestedCollection);

    if (!collectionInToken) {
      errorResponse = await unauthenicated(requestedCollection, claims.ok);
    }
  }

  if (claims.err) {
    console.error(claims.err);
    errorResponse = await unauthenicated(requestedCollection);
  }
} else {
  errorResponse = await unauthenicated(requestedCollection);
}

if (errorResponse) {
  return errorResponse;
}
---

<p>Hello {requestedCollection}!</p>
